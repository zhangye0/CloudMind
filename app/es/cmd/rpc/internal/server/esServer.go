// Code generated by goctl. DO NOT EDIT.
// Source: es.proto

package server

import (
	"context"

	"CloudMind/app/es/cmd/rpc/internal/logic"
	"CloudMind/app/es/cmd/rpc/internal/svc"
	"CloudMind/app/es/cmd/rpc/pb"
)

type EsServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedEsServer
}

func NewEsServer(svcCtx *svc.ServiceContext) *EsServer {
	return &EsServer{
		svcCtx: svcCtx,
	}
}

func (s *EsServer) SearchForFiles(ctx context.Context, in *pb.SearchForFilesReq) (*pb.SearchForFilesResp, error) {
	l := logic.NewSearchForFilesLogic(ctx, s.svcCtx)
	return l.SearchForFiles(in)
}

func (s *EsServer) SearchForPosts(ctx context.Context, in *pb.SearchForPostsReq) (*pb.SearchForPostsResp, error) {
	l := logic.NewSearchForPostsLogic(ctx, s.svcCtx)
	return l.SearchForPosts(in)
}

func (s *EsServer) SearchForFileRank(ctx context.Context, in *pb.SearchForFileRankReq) (*pb.SearchForFileRankResp, error) {
	l := logic.NewSearchForFileRankLogic(ctx, s.svcCtx)
	return l.SearchForFileRank(in)
}

func (s *EsServer) SearchForPostsRank(ctx context.Context, in *pb.SearchForPostsRankReq) (*pb.SearchForPostsRankResp, error) {
	l := logic.NewSearchForPostsRankLogic(ctx, s.svcCtx)
	return l.SearchForPostsRank(in)
}

func (s *EsServer) SearchForFilesByUserId(ctx context.Context, in *pb.SearchForFilesByUserIdReq) (*pb.SearchForFilesByUserIdResp, error) {
	l := logic.NewSearchForFilesByUserIdLogic(ctx, s.svcCtx)
	return l.SearchForFilesByUserId(in)
}

func (s *EsServer) SearchForPostsByUserId(ctx context.Context, in *pb.SearchForPostsByUserIdReq) (*pb.SearchForPostsByUserIdResp, error) {
	l := logic.NewSearchForPostsByUserIdLogic(ctx, s.svcCtx)
	return l.SearchForPostsByUserId(in)
}

func (s *EsServer) UpdateFiles(ctx context.Context, in *pb.UpdateFilesReq) (*pb.UpdateFilesResp, error) {
	l := logic.NewUpdateFilesLogic(ctx, s.svcCtx)
	return l.UpdateFiles(in)
}

func (s *EsServer) UpdatePosts(ctx context.Context, in *pb.UpdatePostsReq) (*pb.UpdatePostsResp, error) {
	l := logic.NewUpdatePostsLogic(ctx, s.svcCtx)
	return l.UpdatePosts(in)
}

func (s *EsServer) InsertFile(ctx context.Context, in *pb.InsertFileReq) (*pb.InsertFileResp, error) {
	l := logic.NewInsertFileLogic(ctx, s.svcCtx)
	return l.InsertFile(in)
}

func (s *EsServer) InsertPost(ctx context.Context, in *pb.InsertPostReq) (*pb.InsertPostResp, error) {
	l := logic.NewInsertPostLogic(ctx, s.svcCtx)
	return l.InsertPost(in)
}
