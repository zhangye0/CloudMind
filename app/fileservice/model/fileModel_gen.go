// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fileFieldNames          = builder.RawFieldNames(&File{})
	fileRows                = strings.Join(fileFieldNames, ",")
	fileRowsExpectAutoSet   = strings.Join(stringx.Remove(fileFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fileRowsWithPlaceHolder = strings.Join(stringx.Remove(fileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCloudmindFilecenterFileIdPrefix = "cache:cloudmindFilecenter:file:id:"
)

type (
	fileModel interface {
		Insert(ctx context.Context, data *File) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*File, error)
		Update(ctx context.Context, data *File) error
		Delete(ctx context.Context, id string) error
	}

	defaultFileModel struct {
		sqlc.CachedConn
		table string
	}

	File struct {
		Id         string  `db:"id"`
		Name       string  `db:"name"`
		Type       string  `db:"type"`
		Path       string  `db:"path"`
		Size       float64 `db:"size"`
		ShareLink  string  `db:"shareLink"`
		ModifyTime string  `db:"modifyTime"`
	}
)

func newFileModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFileModel {
	return &defaultFileModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`file`",
	}
}

func (m *defaultFileModel) Delete(ctx context.Context, id string) error {
	cloudmindFilecenterFileIdKey := fmt.Sprintf("%s%v", cacheCloudmindFilecenterFileIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cloudmindFilecenterFileIdKey)
	return err
}

func (m *defaultFileModel) FindOne(ctx context.Context, id string) (*File, error) {
	cloudmindFilecenterFileIdKey := fmt.Sprintf("%s%v", cacheCloudmindFilecenterFileIdPrefix, id)
	var resp File
	err := m.QueryRowCtx(ctx, &resp, cloudmindFilecenterFileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileModel) Insert(ctx context.Context, data *File) (sql.Result, error) {
	cloudmindFilecenterFileIdKey := fmt.Sprintf("%s%v", cacheCloudmindFilecenterFileIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, fileRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Type, data.Path, data.Size, data.ShareLink, data.ModifyTime)
	}, cloudmindFilecenterFileIdKey)
	return ret, err
}

func (m *defaultFileModel) Update(ctx context.Context, data *File) error {
	cloudmindFilecenterFileIdKey := fmt.Sprintf("%s%v", cacheCloudmindFilecenterFileIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fileRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Type, data.Path, data.Size, data.ShareLink, data.ModifyTime, data.Id)
	}, cloudmindFilecenterFileIdKey)
	return err
}

func (m *defaultFileModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCloudmindFilecenterFileIdPrefix, primary)
}

func (m *defaultFileModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFileModel) tableName() string {
	return m.table
}
