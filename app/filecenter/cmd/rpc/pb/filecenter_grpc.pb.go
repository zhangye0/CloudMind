// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: filecenter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Filecenter_FileUpload_FullMethodName     = "/pb.filecenter/FileUpload"
	Filecenter_FileDownload_FullMethodName   = "/pb.filecenter/FileDownload"
	Filecenter_FileList_FullMethodName       = "/pb.filecenter/FileList"
	Filecenter_FileNameUpdate_FullMethodName = "/pb.filecenter/FileNameUpdate"
	Filecenter_FileCreate_FullMethodName     = "/pb.filecenter/FileCreate"
	Filecenter_FileDeletion_FullMethodName   = "/pb.filecenter/FileDeletion"
	Filecenter_FileMove_FullMethodName       = "/pb.filecenter/FileMove"
	Filecenter_FileShare_FullMethodName      = "/pb.filecenter/FileShare"
	Filecenter_FileShareSave_FullMethodName  = "/pb.filecenter/FileShareSave"
	Filecenter_FileDetails_FullMethodName    = "/pb.filecenter/FileDetails"
)

// FilecenterClient is the client API for Filecenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilecenterClient interface {
	FileUpload(ctx context.Context, in *FileUploadReq, opts ...grpc.CallOption) (*FileUploadResp, error)
	FileDownload(ctx context.Context, in *FileDownloadReq, opts ...grpc.CallOption) (*FileDownloadResp, error)
	FileList(ctx context.Context, in *FileListReq, opts ...grpc.CallOption) (*FileListResp, error)
	FileNameUpdate(ctx context.Context, in *FileNameUpdateReq, opts ...grpc.CallOption) (*FileNameUpdateResp, error)
	FileCreate(ctx context.Context, in *FileCreateReq, opts ...grpc.CallOption) (*FileCreateResp, error)
	FileDeletion(ctx context.Context, in *FileDeletionReq, opts ...grpc.CallOption) (*FileDeletionResp, error)
	FileMove(ctx context.Context, in *FileMoveReq, opts ...grpc.CallOption) (*FileMoveResp, error)
	FileShare(ctx context.Context, in *FileShareReq, opts ...grpc.CallOption) (*FileShareResp, error)
	FileShareSave(ctx context.Context, in *FileShareSaveReq, opts ...grpc.CallOption) (*FileShareSaveResp, error)
	FileDetails(ctx context.Context, in *FileDetailsReq, opts ...grpc.CallOption) (*FileDetailsResp, error)
}

type filecenterClient struct {
	cc grpc.ClientConnInterface
}

func NewFilecenterClient(cc grpc.ClientConnInterface) FilecenterClient {
	return &filecenterClient{cc}
}

func (c *filecenterClient) FileUpload(ctx context.Context, in *FileUploadReq, opts ...grpc.CallOption) (*FileUploadResp, error) {
	out := new(FileUploadResp)
	err := c.cc.Invoke(ctx, Filecenter_FileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileDownload(ctx context.Context, in *FileDownloadReq, opts ...grpc.CallOption) (*FileDownloadResp, error) {
	out := new(FileDownloadResp)
	err := c.cc.Invoke(ctx, Filecenter_FileDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileList(ctx context.Context, in *FileListReq, opts ...grpc.CallOption) (*FileListResp, error) {
	out := new(FileListResp)
	err := c.cc.Invoke(ctx, Filecenter_FileList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileNameUpdate(ctx context.Context, in *FileNameUpdateReq, opts ...grpc.CallOption) (*FileNameUpdateResp, error) {
	out := new(FileNameUpdateResp)
	err := c.cc.Invoke(ctx, Filecenter_FileNameUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileCreate(ctx context.Context, in *FileCreateReq, opts ...grpc.CallOption) (*FileCreateResp, error) {
	out := new(FileCreateResp)
	err := c.cc.Invoke(ctx, Filecenter_FileCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileDeletion(ctx context.Context, in *FileDeletionReq, opts ...grpc.CallOption) (*FileDeletionResp, error) {
	out := new(FileDeletionResp)
	err := c.cc.Invoke(ctx, Filecenter_FileDeletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileMove(ctx context.Context, in *FileMoveReq, opts ...grpc.CallOption) (*FileMoveResp, error) {
	out := new(FileMoveResp)
	err := c.cc.Invoke(ctx, Filecenter_FileMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileShare(ctx context.Context, in *FileShareReq, opts ...grpc.CallOption) (*FileShareResp, error) {
	out := new(FileShareResp)
	err := c.cc.Invoke(ctx, Filecenter_FileShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileShareSave(ctx context.Context, in *FileShareSaveReq, opts ...grpc.CallOption) (*FileShareSaveResp, error) {
	out := new(FileShareSaveResp)
	err := c.cc.Invoke(ctx, Filecenter_FileShareSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileDetails(ctx context.Context, in *FileDetailsReq, opts ...grpc.CallOption) (*FileDetailsResp, error) {
	out := new(FileDetailsResp)
	err := c.cc.Invoke(ctx, Filecenter_FileDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilecenterServer is the server API for Filecenter service.
// All implementations must embed UnimplementedFilecenterServer
// for forward compatibility
type FilecenterServer interface {
	FileUpload(context.Context, *FileUploadReq) (*FileUploadResp, error)
	FileDownload(context.Context, *FileDownloadReq) (*FileDownloadResp, error)
	FileList(context.Context, *FileListReq) (*FileListResp, error)
	FileNameUpdate(context.Context, *FileNameUpdateReq) (*FileNameUpdateResp, error)
	FileCreate(context.Context, *FileCreateReq) (*FileCreateResp, error)
	FileDeletion(context.Context, *FileDeletionReq) (*FileDeletionResp, error)
	FileMove(context.Context, *FileMoveReq) (*FileMoveResp, error)
	FileShare(context.Context, *FileShareReq) (*FileShareResp, error)
	FileShareSave(context.Context, *FileShareSaveReq) (*FileShareSaveResp, error)
	FileDetails(context.Context, *FileDetailsReq) (*FileDetailsResp, error)
	mustEmbedUnimplementedFilecenterServer()
}

// UnimplementedFilecenterServer must be embedded to have forward compatible implementations.
type UnimplementedFilecenterServer struct {
}

func (UnimplementedFilecenterServer) FileUpload(context.Context, *FileUploadReq) (*FileUploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedFilecenterServer) FileDownload(context.Context, *FileDownloadReq) (*FileDownloadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedFilecenterServer) FileList(context.Context, *FileListReq) (*FileListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileList not implemented")
}
func (UnimplementedFilecenterServer) FileNameUpdate(context.Context, *FileNameUpdateReq) (*FileNameUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileNameUpdate not implemented")
}
func (UnimplementedFilecenterServer) FileCreate(context.Context, *FileCreateReq) (*FileCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileCreate not implemented")
}
func (UnimplementedFilecenterServer) FileDeletion(context.Context, *FileDeletionReq) (*FileDeletionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDeletion not implemented")
}
func (UnimplementedFilecenterServer) FileMove(context.Context, *FileMoveReq) (*FileMoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileMove not implemented")
}
func (UnimplementedFilecenterServer) FileShare(context.Context, *FileShareReq) (*FileShareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileShare not implemented")
}
func (UnimplementedFilecenterServer) FileShareSave(context.Context, *FileShareSaveReq) (*FileShareSaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileShareSave not implemented")
}
func (UnimplementedFilecenterServer) FileDetails(context.Context, *FileDetailsReq) (*FileDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDetails not implemented")
}
func (UnimplementedFilecenterServer) mustEmbedUnimplementedFilecenterServer() {}

// UnsafeFilecenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilecenterServer will
// result in compilation errors.
type UnsafeFilecenterServer interface {
	mustEmbedUnimplementedFilecenterServer()
}

func RegisterFilecenterServer(s grpc.ServiceRegistrar, srv FilecenterServer) {
	s.RegisterService(&Filecenter_ServiceDesc, srv)
}

func _Filecenter_FileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileUpload(ctx, req.(*FileUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileDownload(ctx, req.(*FileDownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileList(ctx, req.(*FileListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileNameUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileNameUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileNameUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileNameUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileNameUpdate(ctx, req.(*FileNameUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileCreate(ctx, req.(*FileCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeletionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileDeletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileDeletion(ctx, req.(*FileDeletionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileMove(ctx, req.(*FileMoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileShare(ctx, req.(*FileShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileShareSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileShareSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileShareSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileShareSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileShareSave(ctx, req.(*FileShareSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileDetails(ctx, req.(*FileDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Filecenter_ServiceDesc is the grpc.ServiceDesc for Filecenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filecenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.filecenter",
	HandlerType: (*FilecenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileUpload",
			Handler:    _Filecenter_FileUpload_Handler,
		},
		{
			MethodName: "FileDownload",
			Handler:    _Filecenter_FileDownload_Handler,
		},
		{
			MethodName: "FileList",
			Handler:    _Filecenter_FileList_Handler,
		},
		{
			MethodName: "FileNameUpdate",
			Handler:    _Filecenter_FileNameUpdate_Handler,
		},
		{
			MethodName: "FileCreate",
			Handler:    _Filecenter_FileCreate_Handler,
		},
		{
			MethodName: "FileDeletion",
			Handler:    _Filecenter_FileDeletion_Handler,
		},
		{
			MethodName: "FileMove",
			Handler:    _Filecenter_FileMove_Handler,
		},
		{
			MethodName: "FileShare",
			Handler:    _Filecenter_FileShare_Handler,
		},
		{
			MethodName: "FileShareSave",
			Handler:    _Filecenter_FileShareSave_Handler,
		},
		{
			MethodName: "FileDetails",
			Handler:    _Filecenter_FileDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecenter.proto",
}
